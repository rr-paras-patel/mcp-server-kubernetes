# Example: Azure Workload Identity Configuration
# This example shows how to use Azure Workload Identity for secure access to Azure resources
# without storing service principal credentials in the cluster.

# Deploy with: helm install mcp-server ./helm-chart -f examples/azure-workload-identity.yaml

image:
  repository: flux159/mcp-server-kubernetes
  tag: "latest"

# HTTP transport
transport:
  mode: "http"
  service:
    type: ClusterIP
    port: 3001

# Use ServiceAccount mode with Workload Identity for secure Azure access
kubeconfig:
  provider: "serviceaccount"
  # No Azure service principal secrets needed - Workload Identity handles authentication

# Service Account with Azure Workload Identity configuration
serviceAccount:
  create: true
  annotations:
    # Azure Workload Identity annotations
    azure.workload.identity/client-id: "12345678-1234-1234-1234-123456789012"
    azure.workload.identity/tenant-id: "87654321-4321-4321-4321-210987654321"
    azure.workload.identity/use: "true"

# Pod labels required for Azure Workload Identity
podLabels:
  azure.workload.identity/use: "true"

# Security configuration
security:
  allowOnlyNonDestructive: true
  
  podSecurityContext:
    fsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
      
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

# RBAC for the ServiceAccount
rbac:
  create: true
  annotations:
    description: "MCP Server with Azure Workload Identity cross-cluster access"
  rules:
    # Full access to current cluster via ServiceAccount token
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]

# Resource configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Environment variables for Azure SDK
env:
  # Azure SDK will automatically use Workload Identity credentials
  AZURE_CLIENT_ID: "12345678-1234-1234-1234-123456789012"
  AZURE_TENANT_ID: "87654321-4321-4321-4321-210987654321"
  AZURE_AUTHORITY_HOST: "https://login.microsoftonline.com/"
  AZURE_FEDERATED_TOKEN_FILE: "/var/run/secrets/azure/tokens/azure-identity-token"

# Required setup steps for Azure Workload Identity:
#
# 1. Install Azure Workload Identity on the AKS cluster:
#    helm repo add azure-workload-identity https://azure.github.io/azure-workload-identity/charts
#    helm install workload-identity-webhook azure-workload-identity/workload-identity-webhook \
#      --namespace azure-workload-identity-system \
#      --create-namespace
#
# 2. Enable OIDC issuer on the AKS cluster:
#    az aks update \
#      --resource-group myResourceGroup \
#      --name myAKSCluster \
#      --enable-oidc-issuer \
#      --enable-workload-identity
#
# 3. Create a Managed Identity:
#    az identity create \
#      --name mcp-server-identity \
#      --resource-group myResourceGroup \
#      --location eastus
#
# 4. Create federated credential for the Managed Identity:
#    az identity federated-credential create \
#      --name mcp-server-federated-credential \
#      --identity-name mcp-server-identity \
#      --resource-group myResourceGroup \
#      --issuer $(az aks show --resource-group myResourceGroup --name myAKSCluster --query "oidcIssuerProfile.issuerUrl" -o tsv) \
#      --subject system:serviceaccount:NAMESPACE:RELEASE_NAME-mcp-server-kubernetes
#
# 5. Assign necessary Azure RBAC roles to the Managed Identity:
#    az role assignment create \
#      --assignee $(az identity show --resource-group myResourceGroup --name mcp-server-identity --query principalId -o tsv) \
#      --role "Azure Kubernetes Service Cluster User Role" \
#      --scope /subscriptions/SUBSCRIPTION_ID/resourceGroups/myResourceGroup

# Example Azure role assignments for cross-cluster AKS access:
# - Azure Kubernetes Service Cluster Admin Role (for full cluster access)
# - Azure Kubernetes Service Cluster User Role (for basic access)
# - Azure Kubernetes Service RBAC Admin (for RBAC management)
# - Custom roles for specific resource access

# Volume mounts for Azure Workload Identity token
volumeMounts:
  - name: azure-identity-token
    mountPath: "/var/run/secrets/azure/tokens"
    readOnly: true

volumes:
  - name: azure-identity-token
    projected:
      sources:
        - serviceAccountToken:
            path: azure-identity-token
            expirationSeconds: 3600
            audience: api://AzureADTokenExchange